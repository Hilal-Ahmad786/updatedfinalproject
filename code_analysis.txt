=== POSTS LISTING PAGE ===
FILE: apps/admin/app/posts/page.tsx
import PostsPage from './posts-page'

export default function Posts() {
  return <PostsPage />
}

=== NEW POST PAGE ===
FILE: apps/admin/app/posts/new/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Label } from '@/components/ui/label'
import { 
  ArrowLeftIcon, 
  SaveIcon, 
  SendIcon,
  EyeIcon,
  SettingsIcon,
  TagIcon
} from 'lucide-react'

interface PostData {
  title: string
  slug: string
  excerpt: string
  content: string
  status: 'draft' | 'published'
  featured: boolean
  categoryId: string
  seoTitle: string
  seoDescription: string
  tags: string[]
}

interface Category {
  id: string
  name: string
  slug: string
  color: string
}

export default function NewPostPage() {
  const router = useRouter()
  const [saving, setSaving] = useState(false)
  const [categories, setCategories] = useState<Category[]>([])
  const [post, setPost] = useState<PostData>({
    title: '',
    slug: '',
    excerpt: '',
    content: '',
    status: 'draft',
    featured: false,
    categoryId: '',
    seoTitle: '',
    seoDescription: '',
    tags: []
  })

  // Fetch categories on component mount
  useEffect(() => {
    fetchCategories()
  }, [])

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/categories')
      if (response.ok) {
        const data = await response.json()
        setCategories(data.categories || [])
        // Set default category if available
        if (data.categories && data.categories.length > 0 && !post.categoryId) {
          setPost(prev => ({ ...prev, categoryId: data.categories[0].id }))
        }
      }
    } catch (error) {
      console.error('Error fetching categories:', error)
    }
  }

  // Auto-generate slug from title
  const generateSlug = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim()
  }

  const handleTitleChange = (title: string) => {
    setPost(prev => ({
      ...prev,
      title,
      slug: generateSlug(title),
      seoTitle: title
    }))
  }

  const handleContentChange = (content: string) => {
    setPost(prev => ({ ...prev, content }))
  }

  const handleSave = async (status: 'draft' | 'published') => {
    if (!post.title.trim()) {
      alert('Please enter a title')
      return
    }

    setSaving(true)
    try {
      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...post,
          status,
          seoTitle: post.seoTitle || post.title,
          seoDescription: post.seoDescription || post.excerpt
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to save post')
      }

      const data = await response.json()
      
      // Show success message
      alert(status === 'published' ? 'Post published successfully!' : 'Post saved as draft!')
      
      // Redirect to posts list
      router.push('/posts')
      
    } catch (error) {
      console.error('Error saving post:', error)
      alert('Failed to save post. Please try again.')
    } finally {
      setSaving(false)
    }
  }

  const selectedCategory = categories.find(cat => cat.id === post.categoryId)

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-4">
          <Link href="/posts">
            <Button variant="outline" size="sm">
              <ArrowLeftIcon className="w-4 h-4 mr-2" />
              Back to Posts
            </Button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold">New Post</h1>
            <p className="text-sm text-gray-600">Create a new blog post</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button 
            variant="outline"
            onClick={() => handleSave('draft')}
            disabled={saving}
          >
            <SaveIcon className="w-4 h-4 mr-2" />
            {saving ? 'Saving...' : 'Save Draft'}
          </Button>
          <Button 
            onClick={() => handleSave('published')}
            disabled={saving || !post.title}
          >
            <SendIcon className="w-4 h-4 mr-2" />
            {saving ? 'Publishing...' : 'Publish'}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Title */}
          <Card>
            <CardHeader>
              <CardTitle>Post Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="title">Title *</Label>
                <Input
                  id="title"
                  placeholder="Enter post title..."
                  value={post.title}
                  onChange={(e) => handleTitleChange(e.target.value)}
                  className="text-lg"
                />
              </div>
              
              <div>
                <Label htmlFor="slug">URL Slug</Label>
                <Input
                  id="slug"
                  value={post.slug}
                  onChange={(e) => setPost(prev => ({ ...prev, slug: e.target.value }))}
                  placeholder="post-url-slug"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Preview: /blog/{post.slug || 'your-post-slug'}
                </p>
              </div>

              {/* Category Selection */}
              <div>
                <Label htmlFor="category">Category</Label>
                <select
                  id="category"
                  value={post.categoryId}
                  onChange={(e) => setPost(prev => ({ ...prev, categoryId: e.target.value }))}
                  className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Select a category</option>
                  {categories.map((category) => (
                    <option key={category.id} value={category.id}>
                      {category.name}
                    </option>
                  ))}
                </select>
                {selectedCategory && (
                  <div className="flex items-center gap-2 mt-1">
                    <div 
                      className="w-3 h-3 rounded-full"
                      style={{ backgroundColor: selectedCategory.color }}
                    />
                    <span className="text-xs text-gray-600">{selectedCategory.name}</span>
                  </div>
                )}
              </div>
              
              <div>
                <Label htmlFor="excerpt">Excerpt</Label>
                <Textarea
                  id="excerpt"
                  placeholder="Brief description of your post..."
                  value={post.excerpt}
                  onChange={(e) => setPost(prev => ({ ...prev, excerpt: e.target.value }))}
                  rows={3}
                />
                <p className="text-xs text-gray-500 mt-1">
                  {post.excerpt.length}/160 characters
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Content Editor */}
          <Card>
            <CardHeader>
              <CardTitle>Content Editor</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder="Write your post content here... You can use Markdown formatting."
                value={post.content}
                onChange={(e) => handleContentChange(e.target.value)}
                rows={20}
                className="font-mono"
                style={{ direction: 'ltr', textAlign: 'left' }}
              />
              <p className="text-xs text-gray-500 mt-2">
                Supports Markdown formatting. {post.content.split(' ').filter(word => word.trim()).length} words
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Publish Settings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <SettingsIcon className="w-4 h-4 mr-2" />
                Settings
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  id="featured"
                  checked={post.featured}
                  onChange={(e) => setPost(prev => ({ ...prev, featured: e.target.checked }))}
                  className="rounded"
                />
                <Label htmlFor="featured">Featured Post</Label>
              </div>
            </CardContent>
          </Card>

          {/* SEO Settings */}
          <Card>
            <CardHeader>
              <CardTitle>SEO Settings</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="seoTitle">SEO Title</Label>
                <Input
                  id="seoTitle"
                  placeholder="SEO optimized title..."
                  value={post.seoTitle}
                  onChange={(e) => setPost(prev => ({ ...prev, seoTitle: e.target.value }))}
                />
              </div>
              
              <div>
                <Label htmlFor="seoDescription">SEO Description</Label>
                <Textarea
                  id="seoDescription"
                  placeholder="SEO meta description..."
                  value={post.seoDescription}
                  onChange={(e) => setPost(prev => ({ ...prev, seoDescription: e.target.value }))}
                  rows={3}
                />
                <p className="text-xs text-gray-500 mt-1">
                  {post.seoDescription.length}/160 characters
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Tags */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <TagIcon className="w-4 h-4 mr-2" />
                Tags
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Input
                placeholder="Enter tags separated by commas..."
                value={post.tags.join(', ')}
                onChange={(e) => setPost(prev => ({ 
                  ...prev, 
                  tags: e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag)
                }))}
              />
              <p className="text-xs text-gray-500 mt-1">
                Separate tags with commas
              </p>
              {post.tags.length > 0 && (
                <div className="flex flex-wrap gap-1 mt-2">
                  {post.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}

=== EDIT POST PAGE ===
FILE: apps/admin/app/posts/edit/[id]/page.tsx
File not found


=== POSTS API ===
FILE: apps/admin/app/api/posts/route.ts
//apps/admin/app/api/posts/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getAllPosts, createPost } from '@/lib/mock-posts'
import { getCategoryById } from '@/lib/mock-categories'

export async function GET() {
 try {
   const posts = getAllPosts()
   return NextResponse.json({ posts })
 } catch (error) {
   console.error('Failed to fetch posts:', error)
   return NextResponse.json({ error: 'Failed to fetch posts' }, { status: 500 })
 }
}

export async function POST(request: NextRequest) {
 try {
   const postData = await request.json()
   
   console.log('Received post data:', postData)
   
   // Get category information
   let categoryName = 'General'
   if (postData.categoryId) {
     const category = getCategoryById(postData.categoryId)
     if (category) {
       categoryName = category.name
       console.log(`Found category: ${categoryName} for ID: ${postData.categoryId}`)
     } else {
       console.warn(`Category not found for ID: ${postData.categoryId}`)
     }
   }
   
   // Create post with category information
   const newPost = createPost({
     title: postData.title,
     slug: postData.slug,
     excerpt: postData.excerpt,
     content: postData.content,
     status: postData.status,
     featured: postData.featured || false,
     categoryId: postData.categoryId || '',
     categoryName: categoryName,
     publishedAt: postData.status === 'published' ? new Date().toISOString() : null,
     seoTitle: postData.seoTitle,
     seoDescription: postData.seoDescription,
     tags: postData.tags || []
   })
   
   console.log('Created post with category:', newPost)
   
   return NextResponse.json({ post: newPost }, { status: 201 })
 } catch (error) {
   console.error('Failed to create post:', error)
   return NextResponse.json({ error: 'Failed to create post' }, { status: 500 })
 }
}

=== CATEGORIES PAGE ===
FILE: apps/admin/app/categories/page.tsx
//apps/admin/app/categories/page.tsx

import CategoriesPage from './categories-page'

export default function Categories() {
  return <CategoriesPage />
}

=== CATEGORIES API ===
FILE: apps/admin/app/api/categories/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getAllCategories, createCategory } from '@/lib/mock-categories'

export async function GET() {
  try {
    const categories = getAllCategories()
    return NextResponse.json({ categories })
  } catch (error) {
    console.error('Failed to fetch categories:', error)
    return NextResponse.json({ error: 'Failed to fetch categories' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const categoryData = await request.json()
    
    console.log('Received category data:', categoryData)
    
    // Validate required fields
    if (!categoryData.name || !categoryData.name.trim()) {
      return NextResponse.json({ error: 'Category name is required' }, { status: 400 })
    }
    
    const newCategory = createCategory({
      name: categoryData.name.trim(),
      slug: categoryData.slug || categoryData.name.toLowerCase().replace(/\s+/g, '-'),
      description: categoryData.description || '',
      color: categoryData.color || '#3B82F6'
    })
    
    console.log('Created category:', newCategory)
    
    return NextResponse.json({ category: newCategory }, { status: 201 })
  } catch (error) {
    console.error('Failed to create category:', error)
    return NextResponse.json({ error: 'Failed to create category' }, { status: 500 })
  }
}

=== WEBSITE HYBRID API ===
FILE: apps/web/lib/hybrid-api.ts
// apps/web/lib/hybrid-api.ts
import fs from 'fs'
import path from 'path'
import matter from 'gray-matter'
import { remark } from 'remark'
import remarkHtml from 'remark-html'
import remarkGfm from 'remark-gfm'
import { BlogPost, Author, Category, Tag, PostFrontmatter } from '@/types/blog'
import { getReadingTime } from '@/lib/utils'

const ADMIN_API_URL = process.env.NEXT_PUBLIC_ADMIN_API_URL || 'http://localhost:3001'
const postsDirectory = path.join(process.cwd(), 'content/blog')

// Configure remark processor
const processor = remark()
  .use(remarkGfm)
  .use(remarkHtml, { sanitize: false })

// Authors database (same as original)
const authors: Record<string, Author> = {
  'seda-tokmak': {
    name: 'Seda Tokmak',
    bio: '100leşme yolculuğunun yazarı, Saica Pack Türkiye Genel Müdürü.',
    avatar: '/images/authors/seda-tokmak.svg',
    social: {
      linkedin: 'https://linkedin.com/in/seda-tokmak',
      website: 'https://100lesme.com',
    },
  },
}

// Fetch from admin API
async function fetchFromAdmin(endpoint: string) {
  try {
    const response = await fetch(`${ADMIN_API_URL}/api/${endpoint}`, {
      next: { revalidate: 30 },
    })
    if (response.ok) {
      return await response.json()
    }
  } catch (error) {
    console.warn(`Admin API unavailable for ${endpoint}`)
  }
  return null
}


export async function getAllPosts(): Promise<BlogPost[]> {
    // Try admin API first
    const adminData = await fetchFromAdmin('posts')
    if (adminData?.posts?.length > 0) {
      return adminData.posts
        .filter((post: any) => post.status === 'published')
        .map((post: any) => ({
          slug: post.slug,
          title: post.title,
          description: post.excerpt || '',
          content: post.content,
          date: post.publishedAt || post.createdAt,
          published: true, // Always true since we filtered for published
          featured: post.featured || false,
          author: authors['seda-tokmak'],
          category: post.categoryName || 'General',
          tags: post.tags || [],
          coverImage: undefined,
          readingTime: Math.ceil(post.content.split(' ').length / 200),
          excerpt: post.excerpt || '',
          seo: {
            title: post.seoTitle,
            description: post.seoDescription,
          },
        }))
    }
  
    // Fallback to file system
    try {
      if (!fs.existsSync(postsDirectory)) return []
      
      const files = fs.readdirSync(postsDirectory)
      const slugs = files
        .filter(file => file.endsWith('.mdx') || file.endsWith('.md'))
        .map(file => file.replace(/\.(mdx|md)$/, ''))
  
      const posts = await Promise.all(
        slugs.map(async slug => {
          try {
            const fullPath = path.join(postsDirectory, `${slug}.mdx`)
            if (!fs.existsSync(fullPath)) return null
  
            const fileContents = fs.readFileSync(fullPath, 'utf8')
            const { data, content } = matter(fileContents)
            const frontmatter = data as PostFrontmatter
  
            const processedContent = await processor.process(content)
            const htmlContent = processedContent.toString()
  
            return {
              slug,
              title: frontmatter.title,
              description: frontmatter.description,
              content: htmlContent,
              date: frontmatter.date,
              published: frontmatter.published ?? true,
              featured: frontmatter.featured ?? false,
              author: authors[frontmatter.author] || authors['seda-tokmak'],
              category: frontmatter.category,
              tags: frontmatter.tags || [],
              coverImage: frontmatter.coverImage,
              readingTime: getReadingTime(content),
              excerpt: frontmatter.description || content.slice(0, 160) + '...',
              seo: frontmatter.seo,
            } as BlogPost
          } catch (error) {
            console.error(`Error processing ${slug}:`, error)
            return null
          }
        })
      )
  
      return posts
        .filter((post): post is BlogPost => post !== null)
        .filter(post => post.published)
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
    } catch (error) {
      console.error('Error getting posts:', error)
      return []
    }
  }



export async function getAllCategories(): Promise<Category[]> {
  // Try admin API first
  const adminData = await fetchFromAdmin('categories')
  if (adminData?.categories?.length > 0) {
    return adminData.categories.map((cat: any) => ({
      slug: cat.slug,
      name: cat.name,
      description: cat.description,
      postCount: cat.postCount,
    }))
  }

  // Fallback to default categories
  return [
    { slug: 'technology', name: 'Technology', description: 'Tech posts', postCount: 0 },
    { slug: 'business', name: 'Business', description: 'Business posts', postCount: 0 },
  ]
}

// Re-export other functions
export async function getPostBySlug(slug: string): Promise<BlogPost | null> {
  const allPosts = await getAllPosts()
  return allPosts.find(post => post.slug === slug) || null
}

export async function getFeaturedPosts(): Promise<BlogPost[]> {
  const allPosts = await getAllPosts()
  return allPosts.filter(post => post.featured)
}

export async function getPostsByCategory(categorySlug: string): Promise<BlogPost[]> {
  const allPosts = await getAllPosts()
  return allPosts.filter(post => 
    post.category.toLowerCase().replace(/\s+/g, '-') === categorySlug
  )
}

export async function getPostsByTag(tagSlug: string): Promise<BlogPost[]> {
  const allPosts = await getAllPosts()
  return allPosts.filter(post => 
    post.tags.some(tag => tag.toLowerCase().replace(/\s+/g, '-') === tagSlug)
  )
}

export async function getRelatedPosts(currentSlug: string, limit: number = 3): Promise<BlogPost[]> {
  const allPosts = await getAllPosts()
  return allPosts.filter(post => post.slug !== currentSlug).slice(0, limit)
}

export async function getAllTags(): Promise<Tag[]> {
  const allPosts = await getAllPosts()
  const tagMap = new Map<string, number>()

  allPosts.forEach(post => {
    post.tags.forEach(tag => {
      tagMap.set(tag, (tagMap.get(tag) || 0) + 1)
    })
  })

  return Array.from(tagMap.entries()).map(([name, postCount]) => ({
    slug: name.toLowerCase().replace(/\s+/g, '-'),
    name,
    postCount,
  }))
}

=== WEBSITE BLOG PAGE ===
FILE: apps/web/app/blog/page.tsx
import { getAllPosts } from '@/lib/hybrid-api'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { formatDate } from '@/lib/utils'

import Link from 'next/link'

export default async function BlogPage() {
  const posts = await getAllPosts()

  return (
    <div className="container py-12">
      <div className="mx-auto max-w-4xl">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold tracking-tight sm:text-5xl mb-4">
            Tüm Yazılar
          </h1>
          <p className="text-lg text-muted-foreground">
            100leşme yolculuğumdan tüm yazıları keşfedin ve ilham alın.
          </p>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {posts.map((post) => (
            <Link key={post.slug} href={`/blog/${post.slug}`}>
              <Card className="h-full transition-all duration-300 hover:shadow-lg card-hover">
                {post.coverImage && (
                  <div className="aspect-video overflow-hidden rounded-t-lg">
                    <img
                      src={post.coverImage}
                      alt={post.title}
                      className="h-full w-full object-cover transition-transform duration-300 hover:scale-105"
                    />
                  </div>
                )}
                <CardHeader>
                  <div className="flex items-center gap-2 mb-2">
                    <Badge variant="secondary">{post.category}</Badge>
                    <span className="text-xs text-muted-foreground">
                      {post.readingTime} dk okuma
                    </span>
                  </div>
                  <CardTitle className="line-clamp-2">{post.title}</CardTitle>
                  <CardDescription className="line-clamp-3">
                    {post.description}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">
                      {formatDate(post.date)}
                    </span>
                    <span className="text-sm font-medium text-primary">
                      Devamını oku →
                    </span>
                  </div>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>

        {posts.length === 0 && (
          <div className="text-center py-12">
            <p className="text-muted-foreground">Henüz yazı yok.</p>
          </div>
        )}
      </div>
    </div>
  )
}


=== WEBSITE CATEGORIES PAGE ===
FILE: apps/web/app/categories/page.tsx
//apps/web/app/categories/page.tsx
import { getAllCategories } from '@/lib/hybrid-api'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import Link from 'next/link'

export default async function CategoriesPage() {
  const categories = await getAllCategories()

  return (
    <div className="container py-12">
      <div className="mx-auto max-w-4xl">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold tracking-tight sm:text-5xl mb-4">
            Categories
          </h1>
          <p className="text-lg text-muted-foreground">
            Explore posts by category
          </p>
        </div>

        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {categories.map((category) => (
            <Link key={category.slug} href={`/category/${category.slug}`}>
              <Card className="h-full transition-all duration-300 hover:shadow-lg card-hover">
                <CardHeader>
                  <CardTitle className="line-clamp-2">{category.name}</CardTitle>
                  <CardDescription className="line-clamp-3">
                    {category.description}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Badge variant="secondary">
                    {category.postCount} posts
                  </Badge>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>

        {categories.length === 0 && (
          <div className="text-center py-12">
            <p className="text-muted-foreground">No categories available.</p>
          </div>
        )}
      </div>
    </div>
  )
}

=== SHARED DATA STORE ===
FILE: apps/admin/lib/shared-data.ts
File not found


=== ADDITIONAL FILES ===
FILE: apps/admin/app/layout.tsx
// app/layout.tsx
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { AuthProvider } from '@/lib/auth-context'
import { AdminLayout } from '@/components/admin-layout'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: '100lesme Blog Admin',
  description: 'Admin panel for 100lesme Blog',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <AuthProvider>
          <AdminLayout>
            {children}
          </AdminLayout>
        </AuthProvider>
      </body>
    </html>
  )
}

FILE: apps/web/app/layout.tsx
import type { Metadata, Viewport } from 'next'
import { Inter, JetBrains_Mono } from 'next/font/google'
import { Header } from '@/components/layout/header'
import { Footer } from '@/components/layout/footer'
import { CookieBanner } from '@/components/common/cookie-banner'
import { cn } from '@/lib/utils'
import './globals.css'

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
  display: 'swap',
})

const jetbrainsMono = JetBrains_Mono({
  subsets: ['latin'],
  variable: '--font-mono',
  display: 'swap',
})

export const metadata: Metadata = {
  title: {
    default: '100lesme | Kendimle 100leşme Hikayem',
    template: '%s | 100lesme Blog',
  },
  description: 'Ben Seda. 100leşme yolculuğunun yazarı, yürüyeni ve en çok da tanığıyım. Bu blog, kendisiyle karşılaşmaya cesaret edenlerin sesi, kaybolduklarında yeniden yön bulanların haritası.',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          'min-h-screen bg-background font-sans antialiased',
          inter.variable,
          jetbrainsMono.variable
        )}
      >
        <div className="relative flex min-h-screen flex-col">
          <Header />
          <main className="flex-1">{children}</main>
          <Footer />
        </div>
        <CookieBanner />
      </body>
    </html>
  )
}


=== DIRECTORY STRUCTURE ===
apps/web/app/category/[slug]/page.tsx
apps/web/app/api/health/route.ts
apps/web/app/categories/page.tsx
apps/web/.next/types/app/categories/page.ts
apps/web/components/home/featured-posts.tsx
apps/web/components/blog/related-posts.tsx
apps/web/components/blog/post-card.tsx
apps/web/components/blog/post-hero.tsx
apps/web/lib/admin-api.ts
apps/web/lib/api.ts
apps/web/lib/hybrid-api.ts
apps/admin/app/posts/posts-page.tsx
apps/admin/app/posts/new/page.tsx
apps/admin/app/posts/[id]/edit/page.tsx
apps/admin/app/posts/page.tsx
apps/admin/app/api/posts/route.ts
apps/admin/app/api/posts/[id]/route.ts
apps/admin/app/api/auth/logout/route.ts
apps/admin/app/api/auth/me/route.ts
apps/admin/app/api/auth/login/route.ts
